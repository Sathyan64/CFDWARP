Lambda = DiagonalMatrix[{
   u*X1 + v*X2 + w*X3, 
   u*X1 + v*X2 + w*X3, 
   u*X1 + v*X2 + w*X3, 
   u*X1 + v*X2 + w*X3 - a*Sqrt[X1*X1 + X2*X2 + X3*X3], 
   u*X1 + v*X2 + w*X3 + a*Sqrt[X1*X1 + X2*X2 + X3*X3]}]




U = {rho, rho*u, rho*v, rho*w, rho*a*a/g/(g - 1) + rho*(u*u + v*v + w*w)/2}


F = {rho*(u*X1 + v*X2 + w*X3), 
     rho*u*(u*X1 + v*X2 + w*X3) + rho*a*a/g*X1, 
     rho*v*(u*X1 + v*X2 + w*X3) + rho*a*a/g*X2, 
     rho*w*(u*X1 + v*X2 + w*X3) + rho*a*a/g*X3, 
     rho*(u*X1 + v*X2 + w*X3)*(a*a/(g - 1) + (u*u + v*v + w*w)/2)
    }


A = {{0, 
      X1, 
      X2,  
      X3,
      0}, 
     {(g-3)*X1*u*u/2 - X2*u*v - X3*u*w + (g-1)*X1*(v*v+w*w)/2, 
      (3-g)*X1*u + v*X2 + w*X3, 
      (1-g)*X1*v + u*X2, 
      (1-g)*X1*w + u*X3, 
      (g-1)*X1}, 
     {(g-3)*X2*v*v/2 - X1*v*u - X3*v*w + (g-1)*X2*(u*u+w*w)/2, 
      (1-g)*X2*u + v*X1,
      (3-g)*X2*v + u*X1 + w*X3, 
      (1-g)*X2*w + v*X3,
      (g-1)*X2}, 
     {(g-3)*X3*w*w/2 - X1*w*u - X2*w*v + (g-1)*X3*(u*u+v*v)/2, 
      (1-g)*X3*u + w*X1,
      (1-g)*X3*v + w*X2, 
      (3-g)*X3*w + u*X1 + v*X2,
      (g-1)*X3}, 
     {-(X1*u+X2*v+X3*w)*(a*a/(g-1) + (1-g/2)*(u*u+v*v+w*w)), 
      (2*a*a/(g-1) + v*v + w*w + (3-2*g)*u*u)*X1/2 + X2*(1-g)*u*v + X3*(1-g)*u*w, 
      (2*a*a/(g-1) + u*u + w*w + (3-2*g)*v*v)*X2/2 + X1*(1-g)*v*u + X3*(1-g)*v*w, 
      (2*a*a/(g-1) + u*u + v*v + (3-2*g)*w*w)*X3/2 + X1*(1-g)*w*u + X2*(1-g)*w*v, 
      g*(u*X1 + v*X2 + w*X3)}
    }


F2 = Simplify[A.U]

Linv = Simplify[Transpose[Eigenvectors[A]]]

====================================================================================
Eigenset #1
====================================================================================


Lambda = DiagonalMatrix[{u*X1 + v*X2 + w*X3, u*X1 + v*X2 + w*X3, 
   u*X1 + v*X2 + w*X3, 
   u*X1 + v*X2 + w*X3 - a*Sqrt[X1*X1 + X2*X2 + X3*X3], 
   u*X1 + v*X2 + w*X3 + a*Sqrt[X1*X1 + X2*X2 + X3*X3]}]

A = {{0, X1, X2, X3, 
   0}, {(g - 3)*X1*u*u/2 - X2*u*v - 
    X3*u*w + (g - 1)*X1*(v*v + w*w)/2, (3 - g)*X1*u + v*X2 + 
    w*X3, (1 - g)*X1*v + u*X2, (1 - g)*X1*w + u*X3, (g - 1)*
    X1}, {(g - 3)*X2*v*v/2 - X1*v*u - 
    X3*v*w + (g - 1)*X2*(u*u + w*w)/2, (1 - g)*X2*u + 
    v*X1, (3 - g)*X2*v + u*X1 + w*X3, (1 - g)*X2*w + v*X3, (g - 1)*
    X2}, {(g - 3)*X3*w*w/2 - X1*w*u - 
    X2*w*v + (g - 1)*X3*(u*u + v*v)/2, (1 - g)*X3*u + 
    w*X1, (1 - g)*X3*v + w*X2, (3 - g)*X3*w + u*X1 + v*X2, (g - 1)*
    X3}, {-(X1*u + X2*v + X3*w)*(a*
       a/(g - 1) + (1 - g/2)*(u*u + v*v + w*w)), (2*a*a/(g - 1) + 
       v*v + w*w + (3 - 2*g)*u*u)*X1/2 + X2*(1 - g)*u*v + 
    X3*(1 - g)*u*w, (2*a*a/(g - 1) + u*u + w*w + (3 - 2*g)*v*v)*X2/2 +
     X1*(1 - g)*v*u + 
    X3*(1 - g)*v*w, (2*a*a/(g - 1) + u*u + v*v + (3 - 2*g)*w*w)*X3/2 +
     X1*(1 - g)*w*u + X2*(1 - g)*w*v, g*(u*X1 + v*X2 + w*X3)}}

U = {rho, rho*u, rho*v, rho*w, 
  rho*a*a/g/(g - 1) + rho*(u*u + v*v + w*w)/2}



Linv = { 
     {2*X1,
      -2*w*X1 + 2*u*X3,
      -2*v*X1+2*u*X2,
      2*(g - 1)*(X1*X1 + X2*X2 + X3*X3),
      2*(g - 1)*(X1*X1 + X2*X2 + X3*X3)              
   },
     {2*(u*X1 + v*X2 + w*X3),
      -2*u*w*X1-2*v*w*X2+u*u*X3+v*v*X3-w*w*X3,
      -2*u*v*X1-2*v*w*X3+u*u*X2-v*v*X2+w*w*X2,
      2*(g - 1)*(u*(X1*X1 + X2*X2 + X3*X3) - X1*a*Sqrt[X1*X1 + X2*X2 + X3*X3]),

      2*(g - 1)*(u*(X1*X1 + X2*X2 + X3*X3) + X1*a*Sqrt[X1*X1 + X2*X2 + X3*X3])
   },
     {0,
      0,
      u*u*X1-(v*v+w*w)*X1+2*u*(v*X2+w*X3),
      2*(g - 1)*(v*(X1*X1 + X2*X2 + X3*X3) - X2*a*Sqrt[X1*X1 + X2*X2 + X3*X3]),
      2*(g - 1)*(v*(X1*X1 + X2*X2 + X3*X3) + X2*a*Sqrt[X1*X1 + X2*X2 + X3*X3])
   },
     {0,
      u*u*X1-(v*v+w*w)*X1+2*u*(v*X2+w*X3),
      0,
      2*(g - 1)*(w*(X1*X1 + X2*X2 + X3*X3) - X3*a*Sqrt[X1*X1 + X2*X2 + X3*X3]),
      2*(g - 1)*(w*(X1*X1 + X2*X2 + X3*X3) + X3*a*Sqrt[X1*X1 + X2*X2 + X3*X3])
   },
     {X1*(u*u - v*v - w*w) + 2*u*v*X2 + 2*u*w*X3,
      0,
      0,
      2*a*a*(X1*X1 + X2*X2 + X3*X3) + (g - 1)*((u*u + v*v + w*w)*(X1*X1 + X2*X2 + X3*X3) - 
         2*(u*X1 + v*X2 + w*X3)*a*Sqrt[X1*X1 + X2*X2 + X3*X3]),
      2*a*a*(X1*X1 + X2*X2 + X3*X3) + (g - 1)*((u*u + v*v + w*w)*(X1*X1 + X2*X2 + X3*X3) + 
         2*(u*X1 + v*X2 + w*X3)*a*Sqrt[X1*X1 + X2*X2 + X3*X3])
   }
}


L={

{
(-(-1 + g)*(u*u + v*v + w*w)*(u*u + v*v + w*w) (X1*X1 + X2*X2 + X3*X3) + 
   2*a*a*(4*v*w*X2*X3 + 4*u*X1*(v*X2 + w*X3) + 
      u*u*(X1*X1 - X2*X2 - X3*X3) - w*w*(X1*X1 + X2*X2 - X3*X3) - 
      v*v*(X1*X1 - X2*X2 + X3*X3)))/(4*a*a(X1*X1 + X2*X2 + 
     X3*X3)*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3))),

(-2*a*a*X1*(v*X2 + w*X3) + (-1 + g) u*u*u*(X1*X1 + X2*X2 + X3*X3) + 
   u*(2*a*a*(X2*X2 + X3*X3) + (-1 + g)*v*v*(X1*X1 + X2*X2 + X3*X3) + (-1 + 
         g)*w*w*(X1*X1 + X2*X2 + X3*X3)))/(2*a*a*(X1*X1 + X2*X2 + 
     X3*X3)*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3))),

((-1 + g)*v*(u*u + v*v + w*w) (X1*X1 + X2*X2 + X3*X3) + 
   2*a*a*(-X2*(u*X1 + w*X3) + v*(X1*X1 + X3*X3)))/(2*a*a*(X1*X1 + X2*X2 + 
     X3*X3)*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3))),

(2*a*a*(w*(X1*X1 + X2*X2) - (u*X1 + v*X2)*X3) + (-1 + g)*w*(u*u + v*v + 
      w*w)*(X1*X1 + X2*X2 + X3*X3))/(2*a*a*(X1*X1 + X2*X2 + 
     X3*X3)*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3))),

-(((-1 + g)*(u*u + v*v + w*w))/(
 2*a*a*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3))))
},

{
(w*w*w*X1*X1 - g*w*w*w*X1*X1 + w*w*w*X2*X2 - g*w*w*w*X2*X2 + 2*a*a*u*X1*X3 + 
   2*a*a*v*X2*X3 + 2*a*a*w*X3*X3 + w*w*w*X3*X3 - 
   g*w*w*w*X3*X3 - (-1 + g)*u*u*w*(X1*X1 + X2*X2 + X3*X3) - (-1 + 
      g)*v*v*w*(X1*X1 + X2*X2 + X3*X3))/(2*a*a*(X1*X1 + X2*X2 + 
     X3*X3)*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3))),

(-a*a*X1*X3 + (-1 + g)*u*w*(X1*X1 + X2*X2 + X3*X3))/(a*a*(X1*X1 + X2*X2 + 
   X3*X3)*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3))),

(-a*a*X2*X3 + (-1 + g)*v*w*(X1*X1 + X2*X2 + X3*X3))/(a*a*(X1*X1 + X2*X2 + 
   X3*X3)*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3))),

(a*a*(X1*X1 + X2*X2) + (-1 + g)*w*w*(X1*X1 + X2*X2 + X3*X3))/(a*a*(X1*X1 + 
   X2*X2 + X3*X3)*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3))),

(w - g*w)/(a*a*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3)))
},

{
(2*a*a*u*X1*X2 + 
   2*a*a*w*X2*X3 - (-1 + g)*u*u*v*(X1*X1 + X2*X2 + X3*X3) - (-1 + 
      g)*v*v*v*(X1*X1 + X2*X2 + X3*X3) + 
   v*(2*a*a*X2*X2 - (-1 + g)*w*w*(X1*X1 + X2*X2 + X3*X3)))/(2*a*a*(X1*X1 + 
     X2*X2 + X3*X3)*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3))),

(-a*a*X1*X2 + (-1 + g)*u*v*(X1*X1 + X2*X2 + X3*X3))/(a*a*(X1*X1 + X2*X2 + 
   X3*X3)*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3))),

(a*a*(X1*X1 + X3*X3) + (-1 + g)*v*v*(X1*X1 + X2*X2 + X3*X3))/(a*a* (X1*X1 + 
   X2*X2 + X3*X3)*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3))),

(-a*a*X2*X3 + (-1 + g)*v*w*(X1*X1 + X2*X2 + X3*X3))/(a*a*(X1*X1 + X2*X2 + 
   X3*X3)*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3))),

(v - g*v)/(a*a*(u*u*X1 - (v*v + w*w)*X1 + 2*u*(v*X2 + w*X3)))

},

{
(2*a*(u*X1 + v*X2 + w*X3) + (-1 + g)*(u*u + v*v + w*w)*Sqrt[
  X1*X1 + X2*X2 + X3*X3])/(8*a*a*(-1 + g)*(X1*X1 + X2*X2 + X3*X3)^(3/2)),

(-a*X1 - (-1 + g)*u*Sqrt[X1*X1 + X2*X2 + X3*X3])/(4*a*a*(-1 + g)*(X1*X1 + X2*X2 + X3*X3)^(3/2)),

(-a*X2 - (-1 + g)*v*Sqrt[X1*X1 + X2*X2 + X3*X3])/(4*a*a*(-1 + g)*(X1*X1 + X2*X2 + X3*X3)^(3/2)),

(-a*X3 - (-1 + g)*w*Sqrt[X1*X1 + X2*X2 + X3*X3])/(4*a*a*(-1 + g)*(X1*X1 + X2*X2 + X3*X3)^(3/2)),

1/(4*a*a*(X1*X1 + X2*X2 + X3*X3))

},

{
(-2*a*(u*X1 + v*X2 + w*X3) + (-1 + g)*(u*u + v*v + w*w)*Sqrt[X1*X1 + X2*X2 + X3*X3])
  /(8*a*a*(-1 + g)*(X1*X1 + X2*X2 + X3*X3)^(3/2)),

(a*X1 - (-1 + g)*u*Sqrt[X1*X1 + X2*X2 + X3*X3])/(4*a*a*(-1 + g)*(X1*X1 + X2*X2 + X3*X3)^(3/2)),

(a*X2 - (-1 + g)*v*Sqrt[X1*X1 + X2*X2 + X3*X3])/(4*a*a*(-1 + g)*(X1*X1 + X2*X2 + X3*X3)^(3/2)),

(a*X3 - (-1 + g)*w*Sqrt[X1*X1 + X2*X2 + X3*X3])/(4*a*a*(-1 + g)*(X1*X1 + X2*X2 + X3*X3)^(3/2)),

1/(4*a*a*(X1*X1 + X2*X2 + X3*X3))

}

}

tmpzero = Simplify[A.Linv - Linv.Lambda]
alpha = Simplify[Inverse[Linv].U]

====================================================================================
Eigenset #2
====================================================================================



Xmag = Sqrt[X1*X1 + X2*X2 + X3*X3]
V = (u*X1 + v*X2 + w*X3)

Lambda = DiagonalMatrix[{V, V, V, V + a*Xmag, V - a*Xmag}]


denom = Sqrt[(X3 - X2)^2 + (X1 - X3)^2 + (X2 - X1)^2]/Xmag

l11 = (X3 - X2)/Xmag/denom
l21 = (X1 - X3)/Xmag/denom
l31 = (X2 - X1)/Xmag/denom
l12 = (X2*l31 - X3*l21)/Xmag
l22 = (X3*l11 - X1*l31)/Xmag
l32 = (X1*l21 - X2*l11)/Xmag

q2 = (u*u + v*v + w*w)


Linv = {{1, 0, 0, 1, 1}, {u, l11*a, l12*a, u + a*X1/Xmag, 
   u - a*X1/Xmag}, {v, l21*a, l22*a, v + a*X2/Xmag, 
   v - a*X2/Xmag}, {w, l31*a, l32*a, w + a*X3/Xmag, 
   w - a*X3/Xmag}, {q2/2, l11*a*u + l21*a*v + l31*a*w, 
   l12*a*u + l22*a*v + l32*a*w, a*a/(g - 1) + q2/2 + a*V/Xmag, 
   a*a/(g - 1) + q2/2 - a*V/Xmag}}



===============================================================================
Eigenset #3
===============================================================================


q2 = (u*u + v*v + w*w)

Xmag = Sqrt[X1*X1 + X2*X2 + X3*X3]
V = (u*X1 + v*X2 + w*X3)

Lambda = DiagonalMatrix[{V, V, V, V + a*Xmag, V - a*Xmag}]
U = {rho, rho*u, rho*v, rho*w, rho*a*a/g/(g - 1) + rho*q2/2}

Lambda1 = DiagonalMatrix[{V, V, V, V, V}]
Lambda3 = 
 DiagonalMatrix[{V - a*Xmag, V - a*Xmag, V - a*Xmag, V - a*Xmag, 
   V - a*Xmag}]
Lambda2 = 
 DiagonalMatrix[{V + a*Xmag, V + a*Xmag, V + a*Xmag, V + a*Xmag, 
   V + a*Xmag}]

A = {{0, X1, X2, X3, 
   0}, {(g - 3)*X1*u*u/2 - X2*u*v - 
    X3*u*w + (g - 1)*X1*(v*v + w*w)/2, (3 - g)*X1*u + v*X2 + 
    w*X3, (1 - g)*X1*v + u*X2, (1 - g)*X1*w + u*X3, (g - 1)*
    X1}, {(g - 3)*X2*v*v/2 - X1*v*u - 
    X3*v*w + (g - 1)*X2*(u*u + w*w)/2, (1 - g)*X2*u + 
    v*X1, (3 - g)*X2*v + u*X1 + w*X3, (1 - g)*X2*w + v*X3, (g - 1)*
    X2}, {(g - 3)*X3*w*w/2 - X1*w*u - 
    X2*w*v + (g - 1)*X3*(u*u + v*v)/2, (1 - g)*X3*u + 
    w*X1, (1 - g)*X3*v + w*X2, (3 - g)*X3*w + u*X1 + v*X2, (g - 1)*
    X3}, {-(X1*u + X2*v + X3*w)*(a*
       a/(g - 1) + (1 - g/2)*(u*u + v*v + w*w)), (2*a*a/(g - 1) + 
       v*v + w*w + (3 - 2*g)*u*u)*X1/2 + X2*(1 - g)*u*v + 
    X3*(1 - g)*u*w, (2*a*a/(g - 1) + u*u + w*w + (3 - 2*g)*v*v)*X2/2 +
     X1*(1 - g)*v*u + 
    X3*(1 - g)*v*w, (2*a*a/(g - 1) + u*u + v*v + (3 - 2*g)*w*w)*X3/2 +
     X1*(1 - g)*w*u + X2*(1 - g)*w*v, g*(u*X1 + v*X2 + w*X3)}}


denom = Sqrt[(X3 - X2)^2 + (X1 - X3)^2 + (X2 - X1)^2]/Xmag

l11 = (X3 - X2)/Xmag/denom
l21 = (X1 - X3)/Xmag/denom
l31 = (X2 - X1)/Xmag/denom
l12 = (X2*l31 - X3*l21)/Xmag
l22 = (X3*l11 - X1*l31)/Xmag
l32 = (X1*l21 - X2*l11)/Xmag


eigen2 = {1, u + a*X1/Xmag, v + a*X2/Xmag, w + a*X3/Xmag, 
  a*a/(g - 1) + q2/2 + a*V/Xmag}
eigen3 = {1, u - a*X1/Xmag, v - a*X2/Xmag, w - a*X3/Xmag, 
  a*a/(g - 1) + q2/2 - a*V/Xmag}

eigen1a = {1, u, v, w, q2/2}
eigen1b = {0, l11*a, l21*a, l31*a, l11*a*u + l21*a*v + l31*a*w}
eigen1c = {0, l12*a, l22*a, l32*a, l12*a*u + l22*a*v + l32*a*w}


eigen1e = {1, u - a*(X2 + X3)/Xmag, v + a*(X1 + X3)/Xmag, 
  w + a*(X1 - X2)/Xmag, 
  q2/2 + a*(-u*(X2 + X3) + v*(X1 + X3) + w*(X1 - X2))/Xmag}


eigen1g = {1, u + a*(X2 - X3)/Xmag, v - a*(X1 + X3)/Xmag, 
  w + a*(X1 + X2)/Xmag, 
  q2/2 + a*(u*(X2 - X3) - v*(X1 + X3) + w*(X1 + X2))/Xmag}

eigen1f = {1, u - a*(X2 + X3)/Xmag, v + a*(X1 - X3)/Xmag, 
  w + a*(X1 + X2)/Xmag, 
  q2/2 + a*(-u*(X2 + X3) + v*(X1 - X3) + w*(X1 + X2))/Xmag}

eigen1d = {1, u + a*(X2 + X3)/Xmag, v - a*(X1 + X3)/Xmag, 
  w + a*(X2 - X1)/Xmag, 
  q2/2 + a*(u*(X2 + X3) - v*(X1 + X3) + w*(X2 - X1))/Xmag}


eigen1h = {1, u + a*(X2)/Xmag, v - a*(X1)/Xmag, w, 
  q2/2 + a*(u*(X2) - v*(X1))/Xmag}

eigen1i = {1, u - a*(X2)/Xmag, v + a*(X1)/Xmag, w, 
  q2/2 + a*(-u*(X2) + v*(X1))/Xmag}


eigen1j = {1, u + a*(+X2 + X3)/Xmag, v + a*(-X1 + X3)/Xmag, 
  w + a*(-X1 - X2)/Xmag, 
  q2/2 + a*(u*(+X2 + X3) + v*(-X1 + X3) + w*(-X1 - X2))/Xmag}
eigen1k = {1, u + a*(-X2 - X3)/Xmag, v + a*(+X1 + X3)/Xmag, 
  w + a*(+X1 - X2)/Xmag, 
  q2/2 + a*(u*(-X2 - X3) + v*(+X1 + X3) + w*(+X1 - X2))/Xmag}
eigen1l = {1, u + a*(+X2 - X3)/Xmag, v + a*(-X1 - X3)/Xmag, 
  w + a*(+X1 + X2)/Xmag, 
  q2/2 + a*(u*(+X2 - X3) + v*(-X1 - X3) + w*(+X1 + X2))/Xmag}

eigen1Aa = {1,
  u + a*(+X2 + X3)/Xmag,
  v + a*(-X1 - X3)/Xmag,
  w + a*(-X1 + X2)/Xmag, 
  q2/2 + a*(u*(+X2 + X3) + v*(-X1 - X3) + w*(-X1 + X2))/Xmag}
eigen1Ab = {1,
  u + a*(-X2 + X3)/Xmag,
  v + a*(+X1 + X3)/Xmag,
  w + a*(-X1 - X2)/Xmag, 
  q2/2 + a*(u*(-X2 + X3) + v*(+X1 + X3) + w*(-X1 - X2))/Xmag}
eigen1Ac = {1,
  u + a*(-X2 - X3)/Xmag,
  v + a*(X1 - X3)/Xmag,
  w + a*(+X1 + X2)/Xmag, 
  q2/2 + a*(u*(-X2 - X3) + v*(X1 - X3) + w*(+X1 + X2))/Xmag}


eigen1Ba = {1,
  u,
  v + a*X3/Xmag,
  w - a*X2/Xmag,
  q2/2 + a*(v*X3 - w*X2)/Xmag}
eigen1Bb = {1,
  u - a*X3/Xmag,
  v,
  w + a*X1/Xmag,
  q2/2 + a*(-u*X3 + w*(X1))/Xmag}
eigen1Bc = {1,
  u + a*X2/Xmag,
  v - a*X1/Xmag,
  w,
  q2/2 + a*(u*X2 - v*X1)/Xmag}

eigen1Ca = {1,
  u + a*(+X2 + X3 + X2*X3/Xmag)/Xmag,
  v + a*(-X1 - X3 + X1*X3/Xmag)/Xmag,
  w + a*(-X1 + X2 + -2*X1*X2/Xmag)/Xmag, 
  q2/2 + a*(u*(+X2 + X3 + X2*X3/Xmag) + v*(-X1 - X3 + X1*X3/Xmag) + 
       w*(-X1 + X2 + -2*X1*X2/Xmag))/Xmag}
eigen1Cb = {1,
  u + a*(-X2 + X3 - 2*X2*X3/Xmag)/Xmag,
  v + a*(+X1 + X3 + X1*X3/Xmag)/Xmag,
  w + a*(-X1 - X2 + X1*X2/Xmag)/Xmag, 
  q2/2 + a*(u*(-X2 + X3 - 2*X2*X3/Xmag) + v*(+X1 + X3 + X1*X3/Xmag) + 
       w*(-X1 - X2 + X1*X2/Xmag))/Xmag}
eigen1Cc = {1,
  u + a*(-X2 - X3 + X2*X3/Xmag)/Xmag,
  v + a*(X1 - X3 - 2*X1*X3/Xmag)/Xmag,
  w + a*(+X1 + X2 + X1*X2/Xmag)/Xmag, 
  q2/2 + a*(u*(-X2 - X3 + X2*X3/Xmag) + v*(X1 - X3 - 2*X1*X3/Xmag) + 
       w*(+X1 + X2 + X1*X2/Xmag))/Xmag}

eigen1Da = {1,
  u + a*(+X2 + X3)/Xmag,
  v + a*(-X1)/Xmag,
  w + a*(-X1)/Xmag, q2/2 + a*(u*(+X2 + X3) + v*(-X1) + w*(-X1))/Xmag}
eigen1Db = {1,
  u + a*(-X2)/Xmag,
  v + a*(+X1 + X3)/Xmag,
  w + a*(-X2)/Xmag, q2/2 + a*(u*(-X2) + v*(+X1 + X3) + w*(-X2))/Xmag}
eigen1Dc = {1,
  u + a*(-X3)/Xmag,
  v + a*(-X3)/Xmag,
  w + a*(+X1 + X2)/Xmag, 
  q2/2 + a*(u*(-X3) + v*(-X3) + w*(X1 + X2))/Xmag}

tmpzero = Simplify[A.eigen1Dc - Lambda1.eigen1Dc]

Linvtranspose = {eigen1Da, eigen1Db, eigen1Dc, eigen2, eigen3}
Linv = Simplify[Transpose[Linvtranspose]]
L = Simplify[Inverse[Linv]]
tmpzero = Simplify[A.Linv - Linv.Lambda]
alpha = Simplify[Inverse[Linv].U]


==================================================================================
Useful checks
==================================================================================


L = Simplify[Inverse[Linv]]
ALinv = Simplify[A.Linv]
LinvLambda = Simplify[Linv.Lambda]
tmp = Simplify[ALinv - LinvLambda]
Lambda = Simplify[L.A.Linv]

alpha = Simplify[L.U]


















