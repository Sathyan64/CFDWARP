#include <prim/metrics/_metrics.h>


double _Jinv(np_t np){
  double tmp;
  tmp=np.mt->Jinv;
  return(tmp);
}


double _X(np_t np, long dim1, long dim2){
  double tmp;
  tmp=np.mt->X[dim1][dim2];
  return(tmp);
}


double _x(np_t np, long dim){
  double tmp;
  tmp=np.bs->x[dim];
  return(tmp);
}


static double dxdX_centered(np_t *np, gl_t *gl, long l, long dimx, long dimX){
  double tmp;
  tmp=0.5e0*(np[al(gl,l,dimX,+1)].bs->x[dimx]-np[al(gl,l,dimX,-1)].bs->x[dimx]);
  return(tmp);
}


/* second order accurate backward derivative or second order accurate central
   derivative when possible */
static double dxdX_2ndorder(np_t *np, gl_t *gl, long l, long dimx, long dimX){
  double tmp;
  if (!NodeValid(np[al(gl,l,dimX,+1)],TYPELEVEL_BASE)) {
    assert(NodeValid(np[al(gl,l,dimX,-2)],TYPELEVEL_BASE));
    assert(NodeValid(np[al(gl,l,dimX,-1)],TYPELEVEL_BASE));
    assert(NodeValid(np[al(gl,l,dimX,+0)],TYPELEVEL_BASE));
    tmp=1.5e0*np[al(gl,l,dimX,+0)].bs->x[dimx]-2.0e0*np[al(gl,l,dimX,-1)].bs->x[dimx]
       +0.5e0*np[al(gl,l,dimX,-2)].bs->x[dimx];
  } else {
    if (!NodeValid(np[al(gl,l,dimX,-1)],TYPELEVEL_BASE)) {
      assert(NodeValid(np[al(gl,l,dimX,+2)],TYPELEVEL_BASE));
      assert(NodeValid(np[al(gl,l,dimX,+1)],TYPELEVEL_BASE));
      assert(NodeValid(np[al(gl,l,dimX,+0)],TYPELEVEL_BASE));
      tmp=-1.5e0*np[al(gl,l,dimX,+0)].bs->x[dimx]+2.0e0*np[al(gl,l,dimX,+1)].bs->x[dimx]
          -0.5e0*np[al(gl,l,dimX,+2)].bs->x[dimx];
    } else {
      assert(NodeValid(np[al(gl,l,dimX,+1)],TYPELEVEL_BASE));
      assert(NodeValid(np[al(gl,l,dimX,+0)],TYPELEVEL_BASE));
      assert(NodeValid(np[al(gl,l,dimX,-1)],TYPELEVEL_BASE));
      tmp=0.5e0*(np[al(gl,l,dimX,+1)].bs->x[dimx]-np[al(gl,l,dimX,-1)].bs->x[dimx]);
    }
  }
  return(tmp);
}


/* first order accurate backward derivative, or second order central when possible */
static double dxdX_1storder(np_t *np, gl_t *gl, long l, long dimx, long dimX){
  double tmp;
  if (!NodeValid(np[al(gl,l,dimX,+1)],TYPELEVEL_BASE)) {
    assert(NodeValid(np[al(gl,l,dimX,-1)],TYPELEVEL_BASE));
    assert(NodeValid(np[al(gl,l,dimX,+0)],TYPELEVEL_BASE));
    tmp=1.0e0*np[al(gl,l,dimX,+0)].bs->x[dimx]-1.0e0*np[al(gl,l,dimX,-1)].bs->x[dimx];
  } else {
    if (!NodeValid(np[al(gl,l,dimX,-1)],TYPELEVEL_BASE)) {
      assert(NodeValid(np[al(gl,l,dimX,+1)],TYPELEVEL_BASE));
      assert(NodeValid(np[al(gl,l,dimX,+0)],TYPELEVEL_BASE));
      tmp=-1.0e0*np[al(gl,l,dimX,+0)].bs->x[dimx]+1.0e0*np[al(gl,l,dimX,+1)].bs->x[dimx];
    } else {
      assert(NodeValid(np[al(gl,l,dimX,+1)],TYPELEVEL_BASE));
      assert(NodeValid(np[al(gl,l,dimX,+0)],TYPELEVEL_BASE));
      assert(NodeValid(np[al(gl,l,dimX,-1)],TYPELEVEL_BASE));
      tmp=0.5e0*(np[al(gl,l,dimX,+1)].bs->x[dimx]-np[al(gl,l,dimX,-1)].bs->x[dimx]);
    }
  }
  return(tmp);
}


/* returns 0 in case of no error, and 1 in case of negative Jinv found */
static int FindMetricsLocal(np_t *np, gl_t *gl, long l,
                            double(dxdX(np_t *, gl_t *, long , long , long ))  ) {
  #ifdef _1D
    np[l].mt->Jinv=dxdX(np,gl,l,0,0);
    np[l].mt->X[0][0]=1.0e0/np[l].mt->Jinv;
  #endif
  #ifdef _2D
    long i,j;
    np[l].mt->Jinv=dxdX(np,gl,l,0,0)*dxdX(np,gl,l,1,1)
                  -dxdX(np,gl,l,0,1)*dxdX(np,gl,l,1,0);
    for (i=0; i<nd; i++){
      for (j=0; j<nd; j++){
        np[l].mt->X[i][j]=(2.0e0*krodelta(i,j)-1.0e0)/np[l].mt->Jinv*
           dxdX(np,gl,l,mod(j+1,nd),mod(i+1,nd));
      }
    }
  #endif
  #ifdef _3D
    long i,j;
    np[l].mt->Jinv=0.0e0;
    for (i=0; i<nd; i++){
      np[l].mt->Jinv+=dxdX(np,gl,l,0,i)*dxdX(np,gl,l,1,mod(i+1,nd))*dxdX(np,gl,l,2,mod(i+2,nd))
                     -dxdX(np,gl,l,0,i)*dxdX(np,gl,l,1,mod(i+2,nd))*dxdX(np,gl,l,2,mod(i+1,nd));
    }
    for (i=0; i<nd; i++){
      for (j=0; j<nd; j++){
        np[l].mt->X[i][j]=1.0e0/np[l].mt->Jinv*(
             dxdX(np,gl,l,mod(j+1,nd),mod(i+1,nd))*dxdX(np,gl,l,mod(j+2,nd),mod(i+2,nd))
            -dxdX(np,gl,l,mod(j+2,nd),mod(i+1,nd))*dxdX(np,gl,l,mod(j+1,nd),mod(i+2,nd))
         );
      }
    }
  #endif
  if (NodeValid(np[l],TYPELEVEL_BASE) && np[l].mt->Jinv<0.0e0) return(1); else return(0);

}

/* this subroutine is called for inner nodes */
void FindMetrics(np_t *np, gl_t *gl, long l) {
  FindMetricsLocal(np,gl,l,&dxdX_centered);
}


/* subroutine called for boundary nodes */
void UpdateBdryMetrics(np_t *np, gl_t *gl, int TYPELEVEL,
                       long l_C, long l_B, long l_A, int BDRYMETRICS){
  if (NodeType(np[l_C],TYPELEVEL)>=0) {
    switch (BDRYMETRICS) {
      case BDRYMETRICS_NORMAL:
        if (FindMetricsLocal(np, gl, l_C, &dxdX_2ndorder)!=0){
          if (FindMetricsLocal(np, gl, l_C, &dxdX_1storder)!=0){
             fatalerror("Jinv is negative or node invalid at i=%ld"
               #ifdef _2DL
                 " j=%ld"
               #endif
               #ifdef _3DL
                 " k=%ld"
               #endif
                 "\n",_i(l_C,gl,0)
               #ifdef _2DL
                 ,_i(l_C,gl,1)
               #endif
               #ifdef _3DL
                 ,_i(l_C,gl,2)
               #endif
             );
          }
        }
      break;
      case BDRYMETRICS_CENTERED: /* for symmetry boundary, this one forces a centered discretization */
        FindMetricsLocal(np, gl, l_C, &dxdX_centered);
      break;
    }
  } else {
    fatalerror("Called UpdateBdryMetrics for a non-bdry node\n");
  }
}




