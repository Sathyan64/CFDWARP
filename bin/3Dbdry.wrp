{
   ___________________________________________________________________________________________________________

   WARP: a CFD Code for Plasma Aerodynamics [a]
   ___________________________________________________________________________________________________________

   Cycle Strategy                             Multizone [1]
   Pseudo-Time-Step Integration               Block Implicit ADI [2,3]
   Convection Derivatives Discretization      Flux Difference Splitting 5th Order WENO [4]
   Time Derivative Discretization             Taylor 3rd-Order
   Fluid Transport Model                      Navier-Stokes Perfect Gas
   Chemical Model                             Air 1 species 0 reaction
   Electron Beam Model                        None
   Electromagnetic Fields Model               None
   Thermodynamic Model                        Perfect gas
   Number of Dimensions                       3
   Number of Flux Components                  5
   ___________________________________________________________________________________________________________

   [a]  Parent, B. "Weakly-ionized Airflow Resolver and Post-processor: a CFD Code for Plasma Aerodynamics",
        WARP version 16feb10b compiled on Feb 11 2016 at 10:29:19 by parent on CLEO with ANSI C compiler with POSIX
        zone threads with assertions. WARP is a Copyright (c) 1998-2016 of Bernard Parent. Copying and distribution
        of WARP is prohibited.
   [1]  Parent, B. and Sislian, J.P. "The Use of Domain Decomposition in Accelerating the Convergence of
        Quasihyperbolic Systems", Journal of Computational Physics 179:140-169, 2002.
   [2]  Briley, W.R. and McDonald, H., "On the Structure and Use of Linearized Block Implicit Schemes,"
        Journal of Computational Physics 34:54-73, 1980.
   [3]  Beam, R.M. and Warming, R.F. "An Implicit Finite-Difference Algorithm for Hyperbolic Systems in
        Conservation-Law-Form", Journal of Computational Physics 22:87-110, 1976.
   [4]  Jiang, G. and Shu, C.-W. "Efficient Implementation of Weighted ENO Schemes," Journal of Computational
        Physics 126:202-228, 1996.

}

mf=4.0; 

is=1;  js=1;  ks=1;
ie=round(60*mf); je=round(70*mf); ke=round(25*mf);
jm=round(30*mf); jm2=round(50*mf);
L=0.1;
H=0.1;
Hlayer=0.001;
Hlayer2=0.01;
D=0.01;

Grid(
  Size(is,js,ks, ie,je,ke);
  Corners(is,js,ks, ie,jm,ke, 0,0,0, L,Hlayer,D);
  JoinCorners(is,js,ks, ie,jm,ke,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);

  Corners(is,jm,ks, ie,jm2,ke, 0,Hlayer,0, L,Hlayer2,D);
  JoinCorners(is,jm,ks, ie,jm2,ke,  EE,0.5e0,1.0e0,1.0e0,  GE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);

  Corners(is,jm2,ks, ie,je,ke, 0,Hlayer2,0, L,H,D);
  JoinCorners(is,jm2,ks, ie,je,ke,  EE,0.5e0,1.0e0,1.0e0,  GE,0.8e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);
);


Bdry(
  NavierStokesPerfect(
    {
    _________________________________________________________________________________________

    Boundary Condition Type    Number   Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC      0        Inflow, supersonic
    BDRY_OUTFLOWSUPERSONIC1         1        Outflow, supersonic
    BDRY_SYMMETRICAL1               2        Symmetrical, 1st order (can be used as a "slip wall")
    BDRY_SYMMETRICAL2               3        Symmetrical, 2nd order (can be used as a "slip wall")
    BDRY_WALLTFIXED1               4        Wall, T specified
    BDRY_WALLADIABATIC1             5        Wall, adiabatic
    BDRY_INFLOWSUBSONIC1       6        Subsonic Inflow (Constant Tstag, Pstag at inflow)
    BDRY_OUTFLOWSUBSONIC1           7        Subsonic Outflow (Constant P at outflow)
    _________________________________________________________________________________________
    }
    All(BDRY_OUTFLOWSUPERSONIC1);
    Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_WALLTFIXED1,BDRY_INFLOWSUPERSONIC,  BDRY_SYMMETRICAL1,BDRY_SYMMETRICAL1);
  );
);
 
 
Model(
 
  NavierStokesPerfect(
    gamma=1.4;
    R=286.0; {J/kgK }
    eta=2e-5; {kg/ms}
    kappa=0.03; {W/mK}
    Pmin=500;    Pmax=9.9e99;   {min and max pressure allowed in the domain in Pa}
    Tmin=50;     Tmax=6.0e3;    {min and max temperature allowed in the domain in K}
    zetaA1=0.2e0;   {conditions the convective waves of the A jacobian}
    zetaA1=0.2e0;   {conditions the acoustic waves of the A jacobian}
    zetaA2=0.2;
    zetaA3=0.2e0;   {conditions the eigenvalues of the inverted A jacobian (both acoustic and convective)}
    
    AXISYMMETRIC=FALSE;
    SetHeatDeposited(is,js,ks, ie,je,ke, 0.0 {W/m3});
    SetBodyForce(is,js,ks, ie,je,ke, 0.0{N/m3},0.0{N/m3},0.0{N/m3});
    
  );
);


Init(
  if (!READDATAFILE,
    NavierStokesPerfect(
      {
      _______________________________________________________________________________________

      Initial Condition Type       Parameters
      _______________________________________________________________________________________

      INIT_TYPE1                   V[1]..V[nd],  P,  T     
      INIT_TYPE2                   M[1]..M[nd],  P,  T     
      _______________________________________________________________________________________

      }
      Vx=600;
      Vy=0;
      Vz=0;
      P=10000; {Pa}
      T=300; {K}
      All(1,Vx,Vy,Vz,P,T);
      {
      Bdry(BDRY_WALLTFIXED1, 2, Mx,My,Mz,P,T);
      Region(is,js,ks,  ie,je,ke,  2, Mx,My,Mz,P,T);
      }
    );
  );
);


Cycle(
  NavierStokesPerfect(
    xiverge=0.3e4;          {residual convergence threshold}
    rhoref=0.1;            {reference density in kg/m3}
    aref=300.0;            {reference sound speed in m/s}
    Uref[0]=rhoref;            
    Uref[1]=rhoref*aref;       
    Uref[2]=rhoref*aref;   
    Uref[3]=rhoref*aref;   
    Uref[4]=rhoref*aref*aref;  
  );


  Multizone(
    tmax=2e-4;   {simulation time span in seconds}
    dt=tmax/(400*mf);  {physical time step in seconds}
    sigma1=0.5;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    PLASMATYPE="Off";
    if (mod(round(time/dt),round(tmax/dt/6))==0,
      PLASMATYPE="On";
    );
    printf(PLASMATYPE);
    if (iter==1,
      if (PLASMATYPE=="On",
        CFL=0.2;
      ,{else}
        CFL=0.7;
      );
      Model(
       NavierStokesPerfect(
        SetHeatDeposited(is,js,ks, ie,je,ke, 0 {W/m3});
        if (PLASMATYPE=="On",
          P=2; {W}
        , {else}
          P=0;
        );
        AddHeatPoint(L/10.0,Hlayer,0, Hlayer2/4, P/dt*tmax);
        AddHeatPoint(L/2.0,Hlayer,D, Hlayer2/4, P/dt*tmax);
        
       );
      );
    );
    CFL=min(CFL*1.1,1.4);
    phi1=round(14*sqrt(mf));     {maximum number of gridlines per zone in each dimension}



    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1,dt);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,k_ximax,numzones_updated,numzones_total,clipinfo);
    if ((ximax<xiverge && iter>3) || iter>300,
      IncreaseTimeLevel();
      if (mod(round(time/dt),50)<4,
        WriteDataFile(outputfilename"."round(time/dt));
      );
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );


  MultizoneSteady(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.5;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.3;
    );
    CFL=min(CFL*1.1,3.0);
    phi1=14;     {maximum number of gridlines per zone in each dimension}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,k_ximax,numzones_updated,numzones_total,clipinfo);
  );
  MultizoneMarching(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.5;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=1.0;
    );
    CFL=min(CFL*1.1,1.0);
    phi1=20;         {maximum number of gridlines per zone in each dimension}
    phi2=6;          {minimum number of iterations before advancing the marching-window downstream boundary}
    phi3=16;         {minimum width of the marching window}
    varphiverge=1e4; {parameter related to the streamwise ellipticity sensor}
    entrance=1;      {force the marching window upstream boundary to be at least as high as entrance}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1,phi2,phi3,varphiverge,entrance);

    printf("%6.2f %4ld %4ld %6ld %9.3f   %E (%4ld,%4ld,%4ld) %3ld/%3ld    %s \n",
           CFL,window.is,window.ie,iter,effiter_U,ximax,i_ximax,
           j_ximax,k_ximax,numzones_updated,numzones_total,clipinfo);
  );

);


Post(
  xstation[1]=0.1;{m}
  xstation[2]=0.2;{m}
  xstation[3]=0.3;{m}
  for (cnt,1,3,
    SetPostDomainToXstation(xstation[cnt]);
    printf("    Processing x-station..");
    Pback=_Pback_xstation({Aback,m2}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min (as small a positive value as possible)}1.0);
    Fpot=_Fpot_xstation(Pback,{numsteps}300, {q_min}1.0);
    mdot=_mdot_xstation();
    Tstag=_Tstag_xstation();
    Pstag=_Pstag_xstation({numsteps} 300);
    Pstar=_Pstar_xstation();
    T=_T_xstation();
    q=_q_xstation();
    rho=_rho_xstation();
    htstar=_htstar_xstation();
    printf("\n"
           "    x      = %E m\n"
           "    Pback  = %E Pa\n"
           "    Fpot   = %E Ns/kg\n"
           "    mdot   = %E kg/s\n"
           "    htstar = %E J/kg\n"
           "    Tstag  = %E K\n"
           "    Pstag  = %E Pa\n"
           "    Pstar  = %E Pa\n"
           "    T      = %E K\n"
           "    q      = %E m/s\n"
           "    rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  ResetPostDomain();
  RestrictPostDomainToRegion(is,js,ks, ie,je,ke);
  printf("\n");
  for (dim,1,3,
    Fshear[dim]=_Fshear(dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(dim,BDRY_WALLTFIXED1);
  );
  printf("    Fshear    = (%+E,%+E,%+E) N\n",Fshear[1],Fshear[2],Fshear[3]);
  printf("    Fpressure = (%+E,%+E,%+E) N\n",Fpressure[1],Fpressure[2],Fpressure[3]);
  printf("\n");
  {
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
  }
);
